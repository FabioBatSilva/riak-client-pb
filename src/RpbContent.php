<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : riak.proto
 */


namespace Riak\Client\ProtoBuf;

/**
 * Protobuf message : RpbContent
 */
class RpbContent extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * value required bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $value = null;

    /**
     * content_type optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $content_type = null;

    /**
     * charset optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $charset = null;

    /**
     * content_encoding optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $content_encoding = null;

    /**
     * vtag optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $vtag = null;

    /**
     * links repeated message = 6
     *
     * @var \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbLink>
     */
    protected $links = null;

    /**
     * last_mod optional uint32 = 7
     *
     * @var int
     */
    protected $last_mod = null;

    /**
     * last_mod_usecs optional uint32 = 8
     *
     * @var int
     */
    protected $last_mod_usecs = null;

    /**
     * usermeta repeated message = 9
     *
     * @var \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbPair>
     */
    protected $usermeta = null;

    /**
     * indexes repeated message = 10
     *
     * @var \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbPair>
     */
    protected $indexes = null;

    /**
     * deleted optional bool = 11
     *
     * @var bool
     */
    protected $deleted = null;

    /**
     * Check if 'value' has a value
     *
     * @return bool
     */
    public function hasValue()
    {
        return $this->value !== null;
    }

    /**
     * Get 'value' value
     *
     * @return \Protobuf\Stream
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Set 'value' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setValue($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->value = $value;
    }

    /**
     * Check if 'content_type' has a value
     *
     * @return bool
     */
    public function hasContentType()
    {
        return $this->content_type !== null;
    }

    /**
     * Get 'content_type' value
     *
     * @return \Protobuf\Stream
     */
    public function getContentType()
    {
        return $this->content_type;
    }

    /**
     * Set 'content_type' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setContentType($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->content_type = $value;
    }

    /**
     * Check if 'charset' has a value
     *
     * @return bool
     */
    public function hasCharset()
    {
        return $this->charset !== null;
    }

    /**
     * Get 'charset' value
     *
     * @return \Protobuf\Stream
     */
    public function getCharset()
    {
        return $this->charset;
    }

    /**
     * Set 'charset' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setCharset($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->charset = $value;
    }

    /**
     * Check if 'content_encoding' has a value
     *
     * @return bool
     */
    public function hasContentEncoding()
    {
        return $this->content_encoding !== null;
    }

    /**
     * Get 'content_encoding' value
     *
     * @return \Protobuf\Stream
     */
    public function getContentEncoding()
    {
        return $this->content_encoding;
    }

    /**
     * Set 'content_encoding' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setContentEncoding($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->content_encoding = $value;
    }

    /**
     * Check if 'vtag' has a value
     *
     * @return bool
     */
    public function hasVtag()
    {
        return $this->vtag !== null;
    }

    /**
     * Get 'vtag' value
     *
     * @return \Protobuf\Stream
     */
    public function getVtag()
    {
        return $this->vtag;
    }

    /**
     * Set 'vtag' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setVtag($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->vtag = $value;
    }

    /**
     * Check if 'links' has a value
     *
     * @return bool
     */
    public function hasLinksList()
    {
        return $this->links !== null;
    }

    /**
     * Get 'links' value
     *
     * @return \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbLink>
     */
    public function getLinksList()
    {
        return $this->links;
    }

    /**
     * Set 'links' value
     *
     * @param \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbLink> $value
     */
    public function setLinksList(\Protobuf\Collection $value = null)
    {
        $this->links = $value;
    }

    /**
     * Add a new element to 'links'
     *
     * @param \Riak\Client\ProtoBuf\RpbLink $value
     */
    public function addLinks(\Riak\Client\ProtoBuf\RpbLink $value)
    {
        if ($this->links === null) {
            $this->links = new \Protobuf\MessageCollection();
        }

        $this->links->add($value);
    }

    /**
     * Check if 'last_mod' has a value
     *
     * @return bool
     */
    public function hasLastMod()
    {
        return $this->last_mod !== null;
    }

    /**
     * Get 'last_mod' value
     *
     * @return int
     */
    public function getLastMod()
    {
        return $this->last_mod;
    }

    /**
     * Set 'last_mod' value
     *
     * @param int $value
     */
    public function setLastMod($value = null)
    {
        $this->last_mod = $value;
    }

    /**
     * Check if 'last_mod_usecs' has a value
     *
     * @return bool
     */
    public function hasLastModUsecs()
    {
        return $this->last_mod_usecs !== null;
    }

    /**
     * Get 'last_mod_usecs' value
     *
     * @return int
     */
    public function getLastModUsecs()
    {
        return $this->last_mod_usecs;
    }

    /**
     * Set 'last_mod_usecs' value
     *
     * @param int $value
     */
    public function setLastModUsecs($value = null)
    {
        $this->last_mod_usecs = $value;
    }

    /**
     * Check if 'usermeta' has a value
     *
     * @return bool
     */
    public function hasUsermetaList()
    {
        return $this->usermeta !== null;
    }

    /**
     * Get 'usermeta' value
     *
     * @return \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbPair>
     */
    public function getUsermetaList()
    {
        return $this->usermeta;
    }

    /**
     * Set 'usermeta' value
     *
     * @param \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbPair> $value
     */
    public function setUsermetaList(\Protobuf\Collection $value = null)
    {
        $this->usermeta = $value;
    }

    /**
     * Add a new element to 'usermeta'
     *
     * @param \Riak\Client\ProtoBuf\RpbPair $value
     */
    public function addUsermeta(\Riak\Client\ProtoBuf\RpbPair $value)
    {
        if ($this->usermeta === null) {
            $this->usermeta = new \Protobuf\MessageCollection();
        }

        $this->usermeta->add($value);
    }

    /**
     * Check if 'indexes' has a value
     *
     * @return bool
     */
    public function hasIndexesList()
    {
        return $this->indexes !== null;
    }

    /**
     * Get 'indexes' value
     *
     * @return \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbPair>
     */
    public function getIndexesList()
    {
        return $this->indexes;
    }

    /**
     * Set 'indexes' value
     *
     * @param \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbPair> $value
     */
    public function setIndexesList(\Protobuf\Collection $value = null)
    {
        $this->indexes = $value;
    }

    /**
     * Add a new element to 'indexes'
     *
     * @param \Riak\Client\ProtoBuf\RpbPair $value
     */
    public function addIndexes(\Riak\Client\ProtoBuf\RpbPair $value)
    {
        if ($this->indexes === null) {
            $this->indexes = new \Protobuf\MessageCollection();
        }

        $this->indexes->add($value);
    }

    /**
     * Check if 'deleted' has a value
     *
     * @return bool
     */
    public function hasDeleted()
    {
        return $this->deleted !== null;
    }

    /**
     * Get 'deleted' value
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->deleted;
    }

    /**
     * Set 'deleted' value
     *
     * @param bool $value
     */
    public function setDeleted($value = null)
    {
        $this->deleted = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['value'])) {
            throw new \InvalidArgumentException('Field "value" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'content_type' => null,
            'charset' => null,
            'content_encoding' => null,
            'vtag' => null,
            'links' => [],
            'last_mod' => null,
            'last_mod_usecs' => null,
            'usermeta' => [],
            'indexes' => [],
            'deleted' => null
        ], $values);

        $message->setValue($values['value']);
        $message->setContentType($values['content_type']);
        $message->setCharset($values['charset']);
        $message->setContentEncoding($values['content_encoding']);
        $message->setVtag($values['vtag']);
        $message->setLastMod($values['last_mod']);
        $message->setLastModUsecs($values['last_mod_usecs']);
        $message->setDeleted($values['deleted']);

        foreach ($values['links'] as $item) {
            $message->addLinks($item);
        }

        foreach ($values['usermeta'] as $item) {
            $message->addUsermeta($item);
        }

        foreach ($values['indexes'] as $item) {
            $message->addIndexes($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RpbContent',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'content_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'charset',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'content_encoding',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'vtag',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'links',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.RpbLink'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'last_mod',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'last_mod_usecs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'usermeta',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.RpbPair'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'indexes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.RpbPair'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'deleted',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->value === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbContent#value" (tag 1) is required but has no value.');
        }

        if ($this->value !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->value);
        }

        if ($this->content_type !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->content_type);
        }

        if ($this->charset !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->charset);
        }

        if ($this->content_encoding !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->content_encoding);
        }

        if ($this->vtag !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->vtag);
        }

        if ($this->links !== null) {
            foreach ($this->links as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->last_mod !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->last_mod);
        }

        if ($this->last_mod_usecs !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->last_mod_usecs);
        }

        if ($this->usermeta !== null) {
            foreach ($this->usermeta as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->indexes !== null) {
            foreach ($this->indexes as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->deleted !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->deleted);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->value = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->content_type = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->charset = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->content_encoding = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->vtag = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Riak\Client\ProtoBuf\RpbLink();

                if ($this->links === null) {
                    $this->links = new \Protobuf\MessageCollection();
                }

                $this->links->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_mod = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->last_mod_usecs = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Riak\Client\ProtoBuf\RpbPair();

                if ($this->usermeta === null) {
                    $this->usermeta = new \Protobuf\MessageCollection();
                }

                $this->usermeta->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Riak\Client\ProtoBuf\RpbPair();

                if ($this->indexes === null) {
                    $this->indexes = new \Protobuf\MessageCollection();
                }

                $this->indexes->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->deleted = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->value !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->value);
        }

        if ($this->content_type !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->content_type);
        }

        if ($this->charset !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->charset);
        }

        if ($this->content_encoding !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->content_encoding);
        }

        if ($this->vtag !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->vtag);
        }

        if ($this->links !== null) {
            foreach ($this->links as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->last_mod !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->last_mod);
        }

        if ($this->last_mod_usecs !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->last_mod_usecs);
        }

        if ($this->usermeta !== null) {
            foreach ($this->usermeta as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->indexes !== null) {
            foreach ($this->indexes as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->deleted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->value = null;
        $this->content_type = null;
        $this->charset = null;
        $this->content_encoding = null;
        $this->vtag = null;
        $this->links = null;
        $this->last_mod = null;
        $this->last_mod_usecs = null;
        $this->usermeta = null;
        $this->indexes = null;
        $this->deleted = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Riak\Client\ProtoBuf\RpbContent) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->value = ($message->value !== null) ? $message->value : $this->value;
        $this->content_type = ($message->content_type !== null) ? $message->content_type : $this->content_type;
        $this->charset = ($message->charset !== null) ? $message->charset : $this->charset;
        $this->content_encoding = ($message->content_encoding !== null) ? $message->content_encoding : $this->content_encoding;
        $this->vtag = ($message->vtag !== null) ? $message->vtag : $this->vtag;
        $this->links = ($message->links !== null) ? $message->links : $this->links;
        $this->last_mod = ($message->last_mod !== null) ? $message->last_mod : $this->last_mod;
        $this->last_mod_usecs = ($message->last_mod_usecs !== null) ? $message->last_mod_usecs : $this->last_mod_usecs;
        $this->usermeta = ($message->usermeta !== null) ? $message->usermeta : $this->usermeta;
        $this->indexes = ($message->indexes !== null) ? $message->indexes : $this->indexes;
        $this->deleted = ($message->deleted !== null) ? $message->deleted : $this->deleted;
    }


}

