<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : riak.proto
 */


namespace Riak\Client\ProtoBuf;

/**
 * Protobuf message : RpbPutReq
 */
class RpbPutReq extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * bucket required bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $bucket = null;

    /**
     * key optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $key = null;

    /**
     * vclock optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $vclock = null;

    /**
     * content required message = 4
     *
     * @var \Riak\Client\ProtoBuf\RpbContent
     */
    protected $content = null;

    /**
     * w optional uint32 = 5
     *
     * @var int
     */
    protected $w = null;

    /**
     * dw optional uint32 = 6
     *
     * @var int
     */
    protected $dw = null;

    /**
     * return_body optional bool = 7
     *
     * @var bool
     */
    protected $return_body = null;

    /**
     * pw optional uint32 = 8
     *
     * @var int
     */
    protected $pw = null;

    /**
     * if_not_modified optional bool = 9
     *
     * @var bool
     */
    protected $if_not_modified = null;

    /**
     * if_none_match optional bool = 10
     *
     * @var bool
     */
    protected $if_none_match = null;

    /**
     * return_head optional bool = 11
     *
     * @var bool
     */
    protected $return_head = null;

    /**
     * timeout optional uint32 = 12
     *
     * @var int
     */
    protected $timeout = null;

    /**
     * asis optional bool = 13
     *
     * @var bool
     */
    protected $asis = null;

    /**
     * sloppy_quorum optional bool = 14
     *
     * @var bool
     */
    protected $sloppy_quorum = null;

    /**
     * n_val optional uint32 = 15
     *
     * @var int
     */
    protected $n_val = null;

    /**
     * type optional bytes = 16
     *
     * @var \Protobuf\Stream
     */
    protected $type = null;

    /**
     * Check if 'bucket' has a value
     *
     * @return bool
     */
    public function hasBucket()
    {
        return $this->bucket !== null;
    }

    /**
     * Get 'bucket' value
     *
     * @return \Protobuf\Stream
     */
    public function getBucket()
    {
        return $this->bucket;
    }

    /**
     * Set 'bucket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setBucket($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->bucket = $value;
    }

    /**
     * Check if 'key' has a value
     *
     * @return bool
     */
    public function hasKey()
    {
        return $this->key !== null;
    }

    /**
     * Get 'key' value
     *
     * @return \Protobuf\Stream
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * Set 'key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setKey($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->key = $value;
    }

    /**
     * Check if 'vclock' has a value
     *
     * @return bool
     */
    public function hasVclock()
    {
        return $this->vclock !== null;
    }

    /**
     * Get 'vclock' value
     *
     * @return \Protobuf\Stream
     */
    public function getVclock()
    {
        return $this->vclock;
    }

    /**
     * Set 'vclock' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setVclock($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->vclock = $value;
    }

    /**
     * Check if 'content' has a value
     *
     * @return bool
     */
    public function hasContent()
    {
        return $this->content !== null;
    }

    /**
     * Get 'content' value
     *
     * @return \Riak\Client\ProtoBuf\RpbContent
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * Set 'content' value
     *
     * @param \Riak\Client\ProtoBuf\RpbContent $value
     */
    public function setContent(\Riak\Client\ProtoBuf\RpbContent $value)
    {
        $this->content = $value;
    }

    /**
     * Check if 'w' has a value
     *
     * @return bool
     */
    public function hasW()
    {
        return $this->w !== null;
    }

    /**
     * Get 'w' value
     *
     * @return int
     */
    public function getW()
    {
        return $this->w;
    }

    /**
     * Set 'w' value
     *
     * @param int $value
     */
    public function setW($value = null)
    {
        $this->w = $value;
    }

    /**
     * Check if 'dw' has a value
     *
     * @return bool
     */
    public function hasDw()
    {
        return $this->dw !== null;
    }

    /**
     * Get 'dw' value
     *
     * @return int
     */
    public function getDw()
    {
        return $this->dw;
    }

    /**
     * Set 'dw' value
     *
     * @param int $value
     */
    public function setDw($value = null)
    {
        $this->dw = $value;
    }

    /**
     * Check if 'return_body' has a value
     *
     * @return bool
     */
    public function hasReturnBody()
    {
        return $this->return_body !== null;
    }

    /**
     * Get 'return_body' value
     *
     * @return bool
     */
    public function getReturnBody()
    {
        return $this->return_body;
    }

    /**
     * Set 'return_body' value
     *
     * @param bool $value
     */
    public function setReturnBody($value = null)
    {
        $this->return_body = $value;
    }

    /**
     * Check if 'pw' has a value
     *
     * @return bool
     */
    public function hasPw()
    {
        return $this->pw !== null;
    }

    /**
     * Get 'pw' value
     *
     * @return int
     */
    public function getPw()
    {
        return $this->pw;
    }

    /**
     * Set 'pw' value
     *
     * @param int $value
     */
    public function setPw($value = null)
    {
        $this->pw = $value;
    }

    /**
     * Check if 'if_not_modified' has a value
     *
     * @return bool
     */
    public function hasIfNotModified()
    {
        return $this->if_not_modified !== null;
    }

    /**
     * Get 'if_not_modified' value
     *
     * @return bool
     */
    public function getIfNotModified()
    {
        return $this->if_not_modified;
    }

    /**
     * Set 'if_not_modified' value
     *
     * @param bool $value
     */
    public function setIfNotModified($value = null)
    {
        $this->if_not_modified = $value;
    }

    /**
     * Check if 'if_none_match' has a value
     *
     * @return bool
     */
    public function hasIfNoneMatch()
    {
        return $this->if_none_match !== null;
    }

    /**
     * Get 'if_none_match' value
     *
     * @return bool
     */
    public function getIfNoneMatch()
    {
        return $this->if_none_match;
    }

    /**
     * Set 'if_none_match' value
     *
     * @param bool $value
     */
    public function setIfNoneMatch($value = null)
    {
        $this->if_none_match = $value;
    }

    /**
     * Check if 'return_head' has a value
     *
     * @return bool
     */
    public function hasReturnHead()
    {
        return $this->return_head !== null;
    }

    /**
     * Get 'return_head' value
     *
     * @return bool
     */
    public function getReturnHead()
    {
        return $this->return_head;
    }

    /**
     * Set 'return_head' value
     *
     * @param bool $value
     */
    public function setReturnHead($value = null)
    {
        $this->return_head = $value;
    }

    /**
     * Check if 'timeout' has a value
     *
     * @return bool
     */
    public function hasTimeout()
    {
        return $this->timeout !== null;
    }

    /**
     * Get 'timeout' value
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->timeout;
    }

    /**
     * Set 'timeout' value
     *
     * @param int $value
     */
    public function setTimeout($value = null)
    {
        $this->timeout = $value;
    }

    /**
     * Check if 'asis' has a value
     *
     * @return bool
     */
    public function hasAsis()
    {
        return $this->asis !== null;
    }

    /**
     * Get 'asis' value
     *
     * @return bool
     */
    public function getAsis()
    {
        return $this->asis;
    }

    /**
     * Set 'asis' value
     *
     * @param bool $value
     */
    public function setAsis($value = null)
    {
        $this->asis = $value;
    }

    /**
     * Check if 'sloppy_quorum' has a value
     *
     * @return bool
     */
    public function hasSloppyQuorum()
    {
        return $this->sloppy_quorum !== null;
    }

    /**
     * Get 'sloppy_quorum' value
     *
     * @return bool
     */
    public function getSloppyQuorum()
    {
        return $this->sloppy_quorum;
    }

    /**
     * Set 'sloppy_quorum' value
     *
     * @param bool $value
     */
    public function setSloppyQuorum($value = null)
    {
        $this->sloppy_quorum = $value;
    }

    /**
     * Check if 'n_val' has a value
     *
     * @return bool
     */
    public function hasNVal()
    {
        return $this->n_val !== null;
    }

    /**
     * Get 'n_val' value
     *
     * @return int
     */
    public function getNVal()
    {
        return $this->n_val;
    }

    /**
     * Set 'n_val' value
     *
     * @param int $value
     */
    public function setNVal($value = null)
    {
        $this->n_val = $value;
    }

    /**
     * Check if 'type' has a value
     *
     * @return bool
     */
    public function hasType()
    {
        return $this->type !== null;
    }

    /**
     * Get 'type' value
     *
     * @return \Protobuf\Stream
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set 'type' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setType($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->type = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['bucket'])) {
            throw new \InvalidArgumentException('Field "bucket" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['content'])) {
            throw new \InvalidArgumentException('Field "content" (tag 4) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'key' => null,
            'vclock' => null,
            'w' => null,
            'dw' => null,
            'return_body' => null,
            'pw' => null,
            'if_not_modified' => null,
            'if_none_match' => null,
            'return_head' => null,
            'timeout' => null,
            'asis' => null,
            'sloppy_quorum' => null,
            'n_val' => null,
            'type' => null
        ], $values);

        $message->setBucket($values['bucket']);
        $message->setKey($values['key']);
        $message->setVclock($values['vclock']);
        $message->setContent($values['content']);
        $message->setW($values['w']);
        $message->setDw($values['dw']);
        $message->setReturnBody($values['return_body']);
        $message->setPw($values['pw']);
        $message->setIfNotModified($values['if_not_modified']);
        $message->setIfNoneMatch($values['if_none_match']);
        $message->setReturnHead($values['return_head']);
        $message->setTimeout($values['timeout']);
        $message->setAsis($values['asis']);
        $message->setSloppyQuorum($values['sloppy_quorum']);
        $message->setNVal($values['n_val']);
        $message->setType($values['type']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RpbPutReq',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'bucket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'vclock',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'content',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.RpbContent'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'w',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'dw',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'return_body',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'pw',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'if_not_modified',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'if_none_match',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'return_head',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'timeout',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'asis',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'sloppy_quorum',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'n_val',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->bucket === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbPutReq#bucket" (tag 1) is required but has no value.');
        }

        if ($this->content === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbPutReq#content" (tag 4) is required but has no value.');
        }

        if ($this->bucket !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->bucket);
        }

        if ($this->key !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->key);
        }

        if ($this->vclock !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->vclock);
        }

        if ($this->content !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->content->serializedSize($sizeContext));
            $this->content->writeTo($context);
        }

        if ($this->w !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->w);
        }

        if ($this->dw !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->dw);
        }

        if ($this->return_body !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->return_body);
        }

        if ($this->pw !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->pw);
        }

        if ($this->if_not_modified !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeBool($stream, $this->if_not_modified);
        }

        if ($this->if_none_match !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->if_none_match);
        }

        if ($this->return_head !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->return_head);
        }

        if ($this->timeout !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->timeout);
        }

        if ($this->asis !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeBool($stream, $this->asis);
        }

        if ($this->sloppy_quorum !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->sloppy_quorum);
        }

        if ($this->n_val !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->n_val);
        }

        if ($this->type !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeByteStream($stream, $this->type);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->bucket = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->vclock = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Riak\Client\ProtoBuf\RpbContent();

                $this->content = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->w = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->dw = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_body = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->pw = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->if_not_modified = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->if_none_match = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_head = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->timeout = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->asis = $reader->readBool($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->sloppy_quorum = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->n_val = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->type = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->bucket !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->bucket);
        }

        if ($this->key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->key);
        }

        if ($this->vclock !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->vclock);
        }

        if ($this->content !== null) {
            $innerSize = $this->content->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->w !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->w);
        }

        if ($this->dw !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->dw);
        }

        if ($this->return_body !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->pw !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pw);
        }

        if ($this->if_not_modified !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->if_none_match !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->return_head !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->timeout !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->timeout);
        }

        if ($this->asis !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->sloppy_quorum !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->n_val !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->n_val);
        }

        if ($this->type !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->type);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->bucket = null;
        $this->key = null;
        $this->vclock = null;
        $this->content = null;
        $this->w = null;
        $this->dw = null;
        $this->return_body = null;
        $this->pw = null;
        $this->if_not_modified = null;
        $this->if_none_match = null;
        $this->return_head = null;
        $this->timeout = null;
        $this->asis = null;
        $this->sloppy_quorum = null;
        $this->n_val = null;
        $this->type = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Riak\Client\ProtoBuf\RpbPutReq) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->bucket = ($message->bucket !== null) ? $message->bucket : $this->bucket;
        $this->key = ($message->key !== null) ? $message->key : $this->key;
        $this->vclock = ($message->vclock !== null) ? $message->vclock : $this->vclock;
        $this->content = ($message->content !== null) ? $message->content : $this->content;
        $this->w = ($message->w !== null) ? $message->w : $this->w;
        $this->dw = ($message->dw !== null) ? $message->dw : $this->dw;
        $this->return_body = ($message->return_body !== null) ? $message->return_body : $this->return_body;
        $this->pw = ($message->pw !== null) ? $message->pw : $this->pw;
        $this->if_not_modified = ($message->if_not_modified !== null) ? $message->if_not_modified : $this->if_not_modified;
        $this->if_none_match = ($message->if_none_match !== null) ? $message->if_none_match : $this->if_none_match;
        $this->return_head = ($message->return_head !== null) ? $message->return_head : $this->return_head;
        $this->timeout = ($message->timeout !== null) ? $message->timeout : $this->timeout;
        $this->asis = ($message->asis !== null) ? $message->asis : $this->asis;
        $this->sloppy_quorum = ($message->sloppy_quorum !== null) ? $message->sloppy_quorum : $this->sloppy_quorum;
        $this->n_val = ($message->n_val !== null) ? $message->n_val : $this->n_val;
        $this->type = ($message->type !== null) ? $message->type : $this->type;
    }


}

