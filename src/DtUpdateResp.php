<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : riak.proto
 */


namespace Riak\Client\ProtoBuf;

/**
 * Protobuf message : DtUpdateResp
 */
class DtUpdateResp extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * key optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $key = null;

    /**
     * context optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $context = null;

    /**
     * counter_value optional sint64 = 3
     *
     * @var int
     */
    protected $counter_value = null;

    /**
     * set_value repeated bytes = 4
     *
     * @var \Protobuf\Collection
     */
    protected $set_value = null;

    /**
     * map_value repeated message = 5
     *
     * @var \Protobuf\Collection<\Riak\Client\ProtoBuf\MapEntry>
     */
    protected $map_value = null;

    /**
     * Check if 'key' has a value
     *
     * @return bool
     */
    public function hasKey()
    {
        return $this->key !== null;
    }

    /**
     * Get 'key' value
     *
     * @return \Protobuf\Stream
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * Set 'key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setKey($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->key = $value;
    }

    /**
     * Check if 'context' has a value
     *
     * @return bool
     */
    public function hasContext()
    {
        return $this->context !== null;
    }

    /**
     * Get 'context' value
     *
     * @return \Protobuf\Stream
     */
    public function getContext()
    {
        return $this->context;
    }

    /**
     * Set 'context' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setContext($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->context = $value;
    }

    /**
     * Check if 'counter_value' has a value
     *
     * @return bool
     */
    public function hasCounterValue()
    {
        return $this->counter_value !== null;
    }

    /**
     * Get 'counter_value' value
     *
     * @return int
     */
    public function getCounterValue()
    {
        return $this->counter_value;
    }

    /**
     * Set 'counter_value' value
     *
     * @param int $value
     */
    public function setCounterValue($value = null)
    {
        $this->counter_value = $value;
    }

    /**
     * Check if 'set_value' has a value
     *
     * @return bool
     */
    public function hasSetValueList()
    {
        return $this->set_value !== null;
    }

    /**
     * Get 'set_value' value
     *
     * @return \Protobuf\Collection
     */
    public function getSetValueList()
    {
        return $this->set_value;
    }

    /**
     * Set 'set_value' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setSetValueList(\Protobuf\Collection $value = null)
    {
        $this->set_value = $value;
    }

    /**
     * Add a new element to 'set_value'
     *
     * @param \Protobuf\Stream $value
     */
    public function addSetValue($value)
    {
        if ($this->set_value === null) {
            $this->set_value = new \Protobuf\StreamCollection();
        }

        $this->set_value->add(\Protobuf\Stream::wrap($value));
    }

    /**
     * Check if 'map_value' has a value
     *
     * @return bool
     */
    public function hasMapValueList()
    {
        return $this->map_value !== null;
    }

    /**
     * Get 'map_value' value
     *
     * @return \Protobuf\Collection<\Riak\Client\ProtoBuf\MapEntry>
     */
    public function getMapValueList()
    {
        return $this->map_value;
    }

    /**
     * Set 'map_value' value
     *
     * @param \Protobuf\Collection<\Riak\Client\ProtoBuf\MapEntry> $value
     */
    public function setMapValueList(\Protobuf\Collection $value = null)
    {
        $this->map_value = $value;
    }

    /**
     * Add a new element to 'map_value'
     *
     * @param \Riak\Client\ProtoBuf\MapEntry $value
     */
    public function addMapValue(\Riak\Client\ProtoBuf\MapEntry $value)
    {
        if ($this->map_value === null) {
            $this->map_value = new \Protobuf\MessageCollection();
        }

        $this->map_value->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'key' => null,
            'context' => null,
            'counter_value' => null,
            'set_value' => [],
            'map_value' => []
        ], $values);

        $message->setKey($values['key']);
        $message->setContext($values['context']);
        $message->setCounterValue($values['counter_value']);

        foreach ($values['set_value'] as $item) {
            $message->addSetValue($item);
        }

        foreach ($values['map_value'] as $item) {
            $message->addMapValue($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'DtUpdateResp',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'context',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'counter_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'set_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'map_value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.MapEntry'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->key !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->key);
        }

        if ($this->context !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->context);
        }

        if ($this->counter_value !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeZigzag64($stream, $this->counter_value);
        }

        if ($this->set_value !== null) {
            foreach ($this->set_value as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeByteStream($stream, $val);
            }
        }

        if ($this->map_value !== null) {
            foreach ($this->map_value as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->context = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 18);

                $this->counter_value = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                if ($this->set_value === null) {
                    $this->set_value = new \Protobuf\StreamCollection();
                }

                $this->set_value->add($reader->readByteStream($stream));

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Riak\Client\ProtoBuf\MapEntry();

                if ($this->map_value === null) {
                    $this->map_value = new \Protobuf\MessageCollection();
                }

                $this->map_value->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->key);
        }

        if ($this->context !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->context);
        }

        if ($this->counter_value !== null) {
            $size += 1;
            $size += $calculator->computeZigzag64Size($this->counter_value);
        }

        if ($this->set_value !== null) {
            foreach ($this->set_value as $val) {
                $size += 1;
                $size += $calculator->computeByteStreamSize($val);
            }
        }

        if ($this->map_value !== null) {
            foreach ($this->map_value as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->key = null;
        $this->context = null;
        $this->counter_value = null;
        $this->set_value = null;
        $this->map_value = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Riak\Client\ProtoBuf\DtUpdateResp) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->key = ($message->key !== null) ? $message->key : $this->key;
        $this->context = ($message->context !== null) ? $message->context : $this->context;
        $this->counter_value = ($message->counter_value !== null) ? $message->counter_value : $this->counter_value;
        $this->set_value = ($message->set_value !== null) ? $message->set_value : $this->set_value;
        $this->map_value = ($message->map_value !== null) ? $message->map_value : $this->map_value;
    }


}

