<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : riak.proto
 */


namespace Riak\Client\ProtoBuf;

/**
 * Protobuf message : RpbCounterUpdateReq
 */
class RpbCounterUpdateReq extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * bucket required bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $bucket = null;

    /**
     * key required bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $key = null;

    /**
     * amount required sint64 = 3
     *
     * @var int
     */
    protected $amount = null;

    /**
     * w optional uint32 = 4
     *
     * @var int
     */
    protected $w = null;

    /**
     * dw optional uint32 = 5
     *
     * @var int
     */
    protected $dw = null;

    /**
     * pw optional uint32 = 6
     *
     * @var int
     */
    protected $pw = null;

    /**
     * returnvalue optional bool = 7
     *
     * @var bool
     */
    protected $returnvalue = null;

    /**
     * Check if 'bucket' has a value
     *
     * @return bool
     */
    public function hasBucket()
    {
        return $this->bucket !== null;
    }

    /**
     * Get 'bucket' value
     *
     * @return \Protobuf\Stream
     */
    public function getBucket()
    {
        return $this->bucket;
    }

    /**
     * Set 'bucket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setBucket($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->bucket = $value;
    }

    /**
     * Check if 'key' has a value
     *
     * @return bool
     */
    public function hasKey()
    {
        return $this->key !== null;
    }

    /**
     * Get 'key' value
     *
     * @return \Protobuf\Stream
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * Set 'key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setKey($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->key = $value;
    }

    /**
     * Check if 'amount' has a value
     *
     * @return bool
     */
    public function hasAmount()
    {
        return $this->amount !== null;
    }

    /**
     * Get 'amount' value
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Set 'amount' value
     *
     * @param int $value
     */
    public function setAmount($value)
    {
        $this->amount = $value;
    }

    /**
     * Check if 'w' has a value
     *
     * @return bool
     */
    public function hasW()
    {
        return $this->w !== null;
    }

    /**
     * Get 'w' value
     *
     * @return int
     */
    public function getW()
    {
        return $this->w;
    }

    /**
     * Set 'w' value
     *
     * @param int $value
     */
    public function setW($value = null)
    {
        $this->w = $value;
    }

    /**
     * Check if 'dw' has a value
     *
     * @return bool
     */
    public function hasDw()
    {
        return $this->dw !== null;
    }

    /**
     * Get 'dw' value
     *
     * @return int
     */
    public function getDw()
    {
        return $this->dw;
    }

    /**
     * Set 'dw' value
     *
     * @param int $value
     */
    public function setDw($value = null)
    {
        $this->dw = $value;
    }

    /**
     * Check if 'pw' has a value
     *
     * @return bool
     */
    public function hasPw()
    {
        return $this->pw !== null;
    }

    /**
     * Get 'pw' value
     *
     * @return int
     */
    public function getPw()
    {
        return $this->pw;
    }

    /**
     * Set 'pw' value
     *
     * @param int $value
     */
    public function setPw($value = null)
    {
        $this->pw = $value;
    }

    /**
     * Check if 'returnvalue' has a value
     *
     * @return bool
     */
    public function hasReturnvalue()
    {
        return $this->returnvalue !== null;
    }

    /**
     * Get 'returnvalue' value
     *
     * @return bool
     */
    public function getReturnvalue()
    {
        return $this->returnvalue;
    }

    /**
     * Set 'returnvalue' value
     *
     * @param bool $value
     */
    public function setReturnvalue($value = null)
    {
        $this->returnvalue = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['bucket'])) {
            throw new \InvalidArgumentException('Field "bucket" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['key'])) {
            throw new \InvalidArgumentException('Field "key" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['amount'])) {
            throw new \InvalidArgumentException('Field "amount" (tag 3) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'w' => null,
            'dw' => null,
            'pw' => null,
            'returnvalue' => null
        ], $values);

        $message->setBucket($values['bucket']);
        $message->setKey($values['key']);
        $message->setAmount($values['amount']);
        $message->setW($values['w']);
        $message->setDw($values['dw']);
        $message->setPw($values['pw']);
        $message->setReturnvalue($values['returnvalue']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RpbCounterUpdateReq',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'bucket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'amount',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'w',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'dw',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'pw',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'returnvalue',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->bucket === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbCounterUpdateReq#bucket" (tag 1) is required but has no value.');
        }

        if ($this->key === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbCounterUpdateReq#key" (tag 2) is required but has no value.');
        }

        if ($this->amount === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbCounterUpdateReq#amount" (tag 3) is required but has no value.');
        }

        if ($this->bucket !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->bucket);
        }

        if ($this->key !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->key);
        }

        if ($this->amount !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeZigzag64($stream, $this->amount);
        }

        if ($this->w !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->w);
        }

        if ($this->dw !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->dw);
        }

        if ($this->pw !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->pw);
        }

        if ($this->returnvalue !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->returnvalue);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->bucket = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 18);

                $this->amount = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->w = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->dw = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->pw = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->returnvalue = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->bucket !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->bucket);
        }

        if ($this->key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->key);
        }

        if ($this->amount !== null) {
            $size += 1;
            $size += $calculator->computeZigzag64Size($this->amount);
        }

        if ($this->w !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->w);
        }

        if ($this->dw !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->dw);
        }

        if ($this->pw !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pw);
        }

        if ($this->returnvalue !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->bucket = null;
        $this->key = null;
        $this->amount = null;
        $this->w = null;
        $this->dw = null;
        $this->pw = null;
        $this->returnvalue = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Riak\Client\ProtoBuf\RpbCounterUpdateReq) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->bucket = ($message->bucket !== null) ? $message->bucket : $this->bucket;
        $this->key = ($message->key !== null) ? $message->key : $this->key;
        $this->amount = ($message->amount !== null) ? $message->amount : $this->amount;
        $this->w = ($message->w !== null) ? $message->w : $this->w;
        $this->dw = ($message->dw !== null) ? $message->dw : $this->dw;
        $this->pw = ($message->pw !== null) ? $message->pw : $this->pw;
        $this->returnvalue = ($message->returnvalue !== null) ? $message->returnvalue : $this->returnvalue;
    }


}

