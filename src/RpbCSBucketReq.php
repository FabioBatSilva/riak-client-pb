<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : riak.proto
 */


namespace Riak\Client\ProtoBuf;

/**
 * Protobuf message : RpbCSBucketReq
 */
class RpbCSBucketReq extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * bucket required bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $bucket = null;

    /**
     * start_key required bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $start_key = null;

    /**
     * end_key optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $end_key = null;

    /**
     * start_incl optional bool = 4
     *
     * @var bool
     */
    protected $start_incl = null;

    /**
     * end_incl optional bool = 5
     *
     * @var bool
     */
    protected $end_incl = null;

    /**
     * continuation optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $continuation = null;

    /**
     * max_results optional uint32 = 7
     *
     * @var int
     */
    protected $max_results = null;

    /**
     * timeout optional uint32 = 8
     *
     * @var int
     */
    protected $timeout = null;

    /**
     * type optional bytes = 9
     *
     * @var \Protobuf\Stream
     */
    protected $type = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->start_incl = true;
        $this->end_incl = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'bucket' has a value
     *
     * @return bool
     */
    public function hasBucket()
    {
        return $this->bucket !== null;
    }

    /**
     * Get 'bucket' value
     *
     * @return \Protobuf\Stream
     */
    public function getBucket()
    {
        return $this->bucket;
    }

    /**
     * Set 'bucket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setBucket($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->bucket = $value;
    }

    /**
     * Check if 'start_key' has a value
     *
     * @return bool
     */
    public function hasStartKey()
    {
        return $this->start_key !== null;
    }

    /**
     * Get 'start_key' value
     *
     * @return \Protobuf\Stream
     */
    public function getStartKey()
    {
        return $this->start_key;
    }

    /**
     * Set 'start_key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setStartKey($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->start_key = $value;
    }

    /**
     * Check if 'end_key' has a value
     *
     * @return bool
     */
    public function hasEndKey()
    {
        return $this->end_key !== null;
    }

    /**
     * Get 'end_key' value
     *
     * @return \Protobuf\Stream
     */
    public function getEndKey()
    {
        return $this->end_key;
    }

    /**
     * Set 'end_key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setEndKey($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->end_key = $value;
    }

    /**
     * Check if 'start_incl' has a value
     *
     * @return bool
     */
    public function hasStartIncl()
    {
        return $this->start_incl !== null;
    }

    /**
     * Get 'start_incl' value
     *
     * @return bool
     */
    public function getStartIncl()
    {
        return $this->start_incl;
    }

    /**
     * Set 'start_incl' value
     *
     * @param bool $value
     */
    public function setStartIncl($value = null)
    {
        $this->start_incl = $value;
    }

    /**
     * Check if 'end_incl' has a value
     *
     * @return bool
     */
    public function hasEndIncl()
    {
        return $this->end_incl !== null;
    }

    /**
     * Get 'end_incl' value
     *
     * @return bool
     */
    public function getEndIncl()
    {
        return $this->end_incl;
    }

    /**
     * Set 'end_incl' value
     *
     * @param bool $value
     */
    public function setEndIncl($value = null)
    {
        $this->end_incl = $value;
    }

    /**
     * Check if 'continuation' has a value
     *
     * @return bool
     */
    public function hasContinuation()
    {
        return $this->continuation !== null;
    }

    /**
     * Get 'continuation' value
     *
     * @return \Protobuf\Stream
     */
    public function getContinuation()
    {
        return $this->continuation;
    }

    /**
     * Set 'continuation' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setContinuation($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->continuation = $value;
    }

    /**
     * Check if 'max_results' has a value
     *
     * @return bool
     */
    public function hasMaxResults()
    {
        return $this->max_results !== null;
    }

    /**
     * Get 'max_results' value
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->max_results;
    }

    /**
     * Set 'max_results' value
     *
     * @param int $value
     */
    public function setMaxResults($value = null)
    {
        $this->max_results = $value;
    }

    /**
     * Check if 'timeout' has a value
     *
     * @return bool
     */
    public function hasTimeout()
    {
        return $this->timeout !== null;
    }

    /**
     * Get 'timeout' value
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->timeout;
    }

    /**
     * Set 'timeout' value
     *
     * @param int $value
     */
    public function setTimeout($value = null)
    {
        $this->timeout = $value;
    }

    /**
     * Check if 'type' has a value
     *
     * @return bool
     */
    public function hasType()
    {
        return $this->type !== null;
    }

    /**
     * Get 'type' value
     *
     * @return \Protobuf\Stream
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set 'type' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setType($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->type = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['bucket'])) {
            throw new \InvalidArgumentException('Field "bucket" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['start_key'])) {
            throw new \InvalidArgumentException('Field "start_key" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'end_key' => null,
            'start_incl' => true,
            'end_incl' => false,
            'continuation' => null,
            'max_results' => null,
            'timeout' => null,
            'type' => null
        ], $values);

        $message->setBucket($values['bucket']);
        $message->setStartKey($values['start_key']);
        $message->setEndKey($values['end_key']);
        $message->setStartIncl($values['start_incl']);
        $message->setEndIncl($values['end_incl']);
        $message->setContinuation($values['continuation']);
        $message->setMaxResults($values['max_results']);
        $message->setTimeout($values['timeout']);
        $message->setType($values['type']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RpbCSBucketReq',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'bucket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'start_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'end_key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'start_incl',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'end_incl',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'continuation',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'max_results',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'timeout',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->bucket === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbCSBucketReq#bucket" (tag 1) is required but has no value.');
        }

        if ($this->start_key === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbCSBucketReq#start_key" (tag 2) is required but has no value.');
        }

        if ($this->bucket !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->bucket);
        }

        if ($this->start_key !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->start_key);
        }

        if ($this->end_key !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->end_key);
        }

        if ($this->start_incl !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->start_incl);
        }

        if ($this->end_incl !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->end_incl);
        }

        if ($this->continuation !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->continuation);
        }

        if ($this->max_results !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->max_results);
        }

        if ($this->timeout !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->timeout);
        }

        if ($this->type !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeByteStream($stream, $this->type);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->bucket = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->start_key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->end_key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->start_incl = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->end_incl = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->continuation = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->max_results = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->timeout = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->type = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->bucket !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->bucket);
        }

        if ($this->start_key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->start_key);
        }

        if ($this->end_key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->end_key);
        }

        if ($this->start_incl !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->end_incl !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->continuation !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->continuation);
        }

        if ($this->max_results !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_results);
        }

        if ($this->timeout !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->timeout);
        }

        if ($this->type !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->type);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->bucket = null;
        $this->start_key = null;
        $this->end_key = null;
        $this->start_incl = true;
        $this->end_incl = false;
        $this->continuation = null;
        $this->max_results = null;
        $this->timeout = null;
        $this->type = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Riak\Client\ProtoBuf\RpbCSBucketReq) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->bucket = ($message->bucket !== null) ? $message->bucket : $this->bucket;
        $this->start_key = ($message->start_key !== null) ? $message->start_key : $this->start_key;
        $this->end_key = ($message->end_key !== null) ? $message->end_key : $this->end_key;
        $this->start_incl = ($message->start_incl !== null) ? $message->start_incl : $this->start_incl;
        $this->end_incl = ($message->end_incl !== null) ? $message->end_incl : $this->end_incl;
        $this->continuation = ($message->continuation !== null) ? $message->continuation : $this->continuation;
        $this->max_results = ($message->max_results !== null) ? $message->max_results : $this->max_results;
        $this->timeout = ($message->timeout !== null) ? $message->timeout : $this->timeout;
        $this->type = ($message->type !== null) ? $message->type : $this->type;
    }


}

