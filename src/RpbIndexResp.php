<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : riak.proto
 */


namespace Riak\Client\ProtoBuf;

/**
 * Protobuf message : RpbIndexResp
 */
class RpbIndexResp extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * keys repeated bytes = 1
     *
     * @var \Protobuf\Collection
     */
    protected $keys = null;

    /**
     * results repeated message = 2
     *
     * @var \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbPair>
     */
    protected $results = null;

    /**
     * continuation optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $continuation = null;

    /**
     * done optional bool = 4
     *
     * @var bool
     */
    protected $done = null;

    /**
     * Check if 'keys' has a value
     *
     * @return bool
     */
    public function hasKeysList()
    {
        return $this->keys !== null;
    }

    /**
     * Get 'keys' value
     *
     * @return \Protobuf\Collection
     */
    public function getKeysList()
    {
        return $this->keys;
    }

    /**
     * Set 'keys' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setKeysList(\Protobuf\Collection $value = null)
    {
        $this->keys = $value;
    }

    /**
     * Add a new element to 'keys'
     *
     * @param \Protobuf\Stream $value
     */
    public function addKeys($value)
    {
        if ($this->keys === null) {
            $this->keys = new \Protobuf\StreamCollection();
        }

        $this->keys->add(\Protobuf\Stream::wrap($value));
    }

    /**
     * Check if 'results' has a value
     *
     * @return bool
     */
    public function hasResultsList()
    {
        return $this->results !== null;
    }

    /**
     * Get 'results' value
     *
     * @return \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbPair>
     */
    public function getResultsList()
    {
        return $this->results;
    }

    /**
     * Set 'results' value
     *
     * @param \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbPair> $value
     */
    public function setResultsList(\Protobuf\Collection $value = null)
    {
        $this->results = $value;
    }

    /**
     * Add a new element to 'results'
     *
     * @param \Riak\Client\ProtoBuf\RpbPair $value
     */
    public function addResults(\Riak\Client\ProtoBuf\RpbPair $value)
    {
        if ($this->results === null) {
            $this->results = new \Protobuf\MessageCollection();
        }

        $this->results->add($value);
    }

    /**
     * Check if 'continuation' has a value
     *
     * @return bool
     */
    public function hasContinuation()
    {
        return $this->continuation !== null;
    }

    /**
     * Get 'continuation' value
     *
     * @return \Protobuf\Stream
     */
    public function getContinuation()
    {
        return $this->continuation;
    }

    /**
     * Set 'continuation' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setContinuation($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->continuation = $value;
    }

    /**
     * Check if 'done' has a value
     *
     * @return bool
     */
    public function hasDone()
    {
        return $this->done !== null;
    }

    /**
     * Get 'done' value
     *
     * @return bool
     */
    public function getDone()
    {
        return $this->done;
    }

    /**
     * Set 'done' value
     *
     * @param bool $value
     */
    public function setDone($value = null)
    {
        $this->done = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'keys' => [],
            'results' => [],
            'continuation' => null,
            'done' => null
        ], $values);

        $message->setContinuation($values['continuation']);
        $message->setDone($values['done']);

        foreach ($values['keys'] as $item) {
            $message->addKeys($item);
        }

        foreach ($values['results'] as $item) {
            $message->addResults($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RpbIndexResp',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'keys',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'results',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.RpbPair'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'continuation',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'done',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->keys !== null) {
            foreach ($this->keys as $val) {
                $writer->writeVarint($stream, 10);
                $writer->writeByteStream($stream, $val);
            }
        }

        if ($this->results !== null) {
            foreach ($this->results as $val) {
                $writer->writeVarint($stream, 18);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->continuation !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->continuation);
        }

        if ($this->done !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->done);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                if ($this->keys === null) {
                    $this->keys = new \Protobuf\StreamCollection();
                }

                $this->keys->add($reader->readByteStream($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Riak\Client\ProtoBuf\RpbPair();

                if ($this->results === null) {
                    $this->results = new \Protobuf\MessageCollection();
                }

                $this->results->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->continuation = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->done = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->keys !== null) {
            foreach ($this->keys as $val) {
                $size += 1;
                $size += $calculator->computeByteStreamSize($val);
            }
        }

        if ($this->results !== null) {
            foreach ($this->results as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->continuation !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->continuation);
        }

        if ($this->done !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->keys = null;
        $this->results = null;
        $this->continuation = null;
        $this->done = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Riak\Client\ProtoBuf\RpbIndexResp) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->keys = ($message->keys !== null) ? $message->keys : $this->keys;
        $this->results = ($message->results !== null) ? $message->results : $this->results;
        $this->continuation = ($message->continuation !== null) ? $message->continuation : $this->continuation;
        $this->done = ($message->done !== null) ? $message->done : $this->done;
    }


}

