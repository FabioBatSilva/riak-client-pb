<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : riak.proto
 */


namespace Riak\Client\ProtoBuf\DtFetchResp;

/**
 * Protobuf enum : DtFetchResp.DataType
 */
class DataType extends \Protobuf\Enum
{

    /**
     * COUNTER = 1
     */
    const COUNTER_VALUE = 1;

    /**
     * SET = 2
     */
    const SET_VALUE = 2;

    /**
     * MAP = 3
     */
    const MAP_VALUE = 3;

    /**
     * @var \Riak\Client\ProtoBuf\DtFetchResp\DataType
     */
    protected static $COUNTER = null;

    /**
     * @var \Riak\Client\ProtoBuf\DtFetchResp\DataType
     */
    protected static $SET = null;

    /**
     * @var \Riak\Client\ProtoBuf\DtFetchResp\DataType
     */
    protected static $MAP = null;

    /**
     * @return \Riak\Client\ProtoBuf\DtFetchResp\DataType
     */
    public static function COUNTER()
    {
        if (self::$COUNTER !== null) {
            return self::$COUNTER;
        }

        return self::$COUNTER = new self('COUNTER', self::COUNTER_VALUE);
    }

    /**
     * @return \Riak\Client\ProtoBuf\DtFetchResp\DataType
     */
    public static function SET()
    {
        if (self::$SET !== null) {
            return self::$SET;
        }

        return self::$SET = new self('SET', self::SET_VALUE);
    }

    /**
     * @return \Riak\Client\ProtoBuf\DtFetchResp\DataType
     */
    public static function MAP()
    {
        if (self::$MAP !== null) {
            return self::$MAP;
        }

        return self::$MAP = new self('MAP', self::MAP_VALUE);
    }

    /**
     * @param int $value
     * @return \Riak\Client\ProtoBuf\DtFetchResp\DataType
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 1: return self::COUNTER();
            case 2: return self::SET();
            case 3: return self::MAP();
            default: return null;
        }
    }


}

