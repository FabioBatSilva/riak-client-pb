<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : riak.proto
 */


namespace Riak\Client\ProtoBuf;

/**
 * Protobuf message : RpbSearchQueryReq
 */
class RpbSearchQueryReq extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * q required bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $q = null;

    /**
     * index required bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $index = null;

    /**
     * rows optional uint32 = 3
     *
     * @var int
     */
    protected $rows = null;

    /**
     * start optional uint32 = 4
     *
     * @var int
     */
    protected $start = null;

    /**
     * sort optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $sort = null;

    /**
     * filter optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $filter = null;

    /**
     * df optional bytes = 7
     *
     * @var \Protobuf\Stream
     */
    protected $df = null;

    /**
     * op optional bytes = 8
     *
     * @var \Protobuf\Stream
     */
    protected $op = null;

    /**
     * fl repeated bytes = 9
     *
     * @var \Protobuf\Collection
     */
    protected $fl = null;

    /**
     * presort optional bytes = 10
     *
     * @var \Protobuf\Stream
     */
    protected $presort = null;

    /**
     * Check if 'q' has a value
     *
     * @return bool
     */
    public function hasQ()
    {
        return $this->q !== null;
    }

    /**
     * Get 'q' value
     *
     * @return \Protobuf\Stream
     */
    public function getQ()
    {
        return $this->q;
    }

    /**
     * Set 'q' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setQ($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->q = $value;
    }

    /**
     * Check if 'index' has a value
     *
     * @return bool
     */
    public function hasIndex()
    {
        return $this->index !== null;
    }

    /**
     * Get 'index' value
     *
     * @return \Protobuf\Stream
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * Set 'index' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setIndex($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->index = $value;
    }

    /**
     * Check if 'rows' has a value
     *
     * @return bool
     */
    public function hasRows()
    {
        return $this->rows !== null;
    }

    /**
     * Get 'rows' value
     *
     * @return int
     */
    public function getRows()
    {
        return $this->rows;
    }

    /**
     * Set 'rows' value
     *
     * @param int $value
     */
    public function setRows($value = null)
    {
        $this->rows = $value;
    }

    /**
     * Check if 'start' has a value
     *
     * @return bool
     */
    public function hasStart()
    {
        return $this->start !== null;
    }

    /**
     * Get 'start' value
     *
     * @return int
     */
    public function getStart()
    {
        return $this->start;
    }

    /**
     * Set 'start' value
     *
     * @param int $value
     */
    public function setStart($value = null)
    {
        $this->start = $value;
    }

    /**
     * Check if 'sort' has a value
     *
     * @return bool
     */
    public function hasSort()
    {
        return $this->sort !== null;
    }

    /**
     * Get 'sort' value
     *
     * @return \Protobuf\Stream
     */
    public function getSort()
    {
        return $this->sort;
    }

    /**
     * Set 'sort' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSort($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->sort = $value;
    }

    /**
     * Check if 'filter' has a value
     *
     * @return bool
     */
    public function hasFilter()
    {
        return $this->filter !== null;
    }

    /**
     * Get 'filter' value
     *
     * @return \Protobuf\Stream
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * Set 'filter' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setFilter($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->filter = $value;
    }

    /**
     * Check if 'df' has a value
     *
     * @return bool
     */
    public function hasDf()
    {
        return $this->df !== null;
    }

    /**
     * Get 'df' value
     *
     * @return \Protobuf\Stream
     */
    public function getDf()
    {
        return $this->df;
    }

    /**
     * Set 'df' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setDf($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->df = $value;
    }

    /**
     * Check if 'op' has a value
     *
     * @return bool
     */
    public function hasOp()
    {
        return $this->op !== null;
    }

    /**
     * Get 'op' value
     *
     * @return \Protobuf\Stream
     */
    public function getOp()
    {
        return $this->op;
    }

    /**
     * Set 'op' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setOp($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->op = $value;
    }

    /**
     * Check if 'fl' has a value
     *
     * @return bool
     */
    public function hasFlList()
    {
        return $this->fl !== null;
    }

    /**
     * Get 'fl' value
     *
     * @return \Protobuf\Collection
     */
    public function getFlList()
    {
        return $this->fl;
    }

    /**
     * Set 'fl' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setFlList(\Protobuf\Collection $value = null)
    {
        $this->fl = $value;
    }

    /**
     * Add a new element to 'fl'
     *
     * @param \Protobuf\Stream $value
     */
    public function addFl($value)
    {
        if ($this->fl === null) {
            $this->fl = new \Protobuf\StreamCollection();
        }

        $this->fl->add(\Protobuf\Stream::wrap($value));
    }

    /**
     * Check if 'presort' has a value
     *
     * @return bool
     */
    public function hasPresort()
    {
        return $this->presort !== null;
    }

    /**
     * Get 'presort' value
     *
     * @return \Protobuf\Stream
     */
    public function getPresort()
    {
        return $this->presort;
    }

    /**
     * Set 'presort' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setPresort($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->presort = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['q'])) {
            throw new \InvalidArgumentException('Field "q" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['index'])) {
            throw new \InvalidArgumentException('Field "index" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'rows' => null,
            'start' => null,
            'sort' => null,
            'filter' => null,
            'df' => null,
            'op' => null,
            'fl' => [],
            'presort' => null
        ], $values);

        $message->setQ($values['q']);
        $message->setIndex($values['index']);
        $message->setRows($values['rows']);
        $message->setStart($values['start']);
        $message->setSort($values['sort']);
        $message->setFilter($values['filter']);
        $message->setDf($values['df']);
        $message->setOp($values['op']);
        $message->setPresort($values['presort']);

        foreach ($values['fl'] as $item) {
            $message->addFl($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RpbSearchQueryReq',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'q',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'index',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'rows',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'start',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'sort',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'filter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'df',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'op',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'fl',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'presort',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->q === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbSearchQueryReq#q" (tag 1) is required but has no value.');
        }

        if ($this->index === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbSearchQueryReq#index" (tag 2) is required but has no value.');
        }

        if ($this->q !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->q);
        }

        if ($this->index !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->index);
        }

        if ($this->rows !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->rows);
        }

        if ($this->start !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->start);
        }

        if ($this->sort !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->sort);
        }

        if ($this->filter !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->filter);
        }

        if ($this->df !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeByteStream($stream, $this->df);
        }

        if ($this->op !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeByteStream($stream, $this->op);
        }

        if ($this->fl !== null) {
            foreach ($this->fl as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeByteStream($stream, $val);
            }
        }

        if ($this->presort !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeByteStream($stream, $this->presort);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->q = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->index = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->rows = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->start = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->sort = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->filter = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->df = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->op = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                if ($this->fl === null) {
                    $this->fl = new \Protobuf\StreamCollection();
                }

                $this->fl->add($reader->readByteStream($stream));

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->presort = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->q !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->q);
        }

        if ($this->index !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->index);
        }

        if ($this->rows !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->rows);
        }

        if ($this->start !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->start);
        }

        if ($this->sort !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->sort);
        }

        if ($this->filter !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->filter);
        }

        if ($this->df !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->df);
        }

        if ($this->op !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->op);
        }

        if ($this->fl !== null) {
            foreach ($this->fl as $val) {
                $size += 1;
                $size += $calculator->computeByteStreamSize($val);
            }
        }

        if ($this->presort !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->presort);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->q = null;
        $this->index = null;
        $this->rows = null;
        $this->start = null;
        $this->sort = null;
        $this->filter = null;
        $this->df = null;
        $this->op = null;
        $this->fl = null;
        $this->presort = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Riak\Client\ProtoBuf\RpbSearchQueryReq) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->q = ($message->q !== null) ? $message->q : $this->q;
        $this->index = ($message->index !== null) ? $message->index : $this->index;
        $this->rows = ($message->rows !== null) ? $message->rows : $this->rows;
        $this->start = ($message->start !== null) ? $message->start : $this->start;
        $this->sort = ($message->sort !== null) ? $message->sort : $this->sort;
        $this->filter = ($message->filter !== null) ? $message->filter : $this->filter;
        $this->df = ($message->df !== null) ? $message->df : $this->df;
        $this->op = ($message->op !== null) ? $message->op : $this->op;
        $this->fl = ($message->fl !== null) ? $message->fl : $this->fl;
        $this->presort = ($message->presort !== null) ? $message->presort : $this->presort;
    }


}

