<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : riak.proto
 */


namespace Riak\Client\ProtoBuf;

/**
 * Protobuf message : RpbIndexReq
 */
class RpbIndexReq extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * bucket required bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $bucket = null;

    /**
     * index required bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $index = null;

    /**
     * qtype required enum = 3
     *
     * @var \Riak\Client\ProtoBuf\RpbIndexReq\IndexQueryType
     */
    protected $qtype = null;

    /**
     * key optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $key = null;

    /**
     * range_min optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $range_min = null;

    /**
     * range_max optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $range_max = null;

    /**
     * return_terms optional bool = 7
     *
     * @var bool
     */
    protected $return_terms = null;

    /**
     * stream optional bool = 8
     *
     * @var bool
     */
    protected $stream = null;

    /**
     * max_results optional uint32 = 9
     *
     * @var int
     */
    protected $max_results = null;

    /**
     * continuation optional bytes = 10
     *
     * @var \Protobuf\Stream
     */
    protected $continuation = null;

    /**
     * timeout optional uint32 = 11
     *
     * @var int
     */
    protected $timeout = null;

    /**
     * type optional bytes = 12
     *
     * @var \Protobuf\Stream
     */
    protected $type = null;

    /**
     * term_regex optional bytes = 13
     *
     * @var \Protobuf\Stream
     */
    protected $term_regex = null;

    /**
     * pagination_sort optional bool = 14
     *
     * @var bool
     */
    protected $pagination_sort = null;

    /**
     * Check if 'bucket' has a value
     *
     * @return bool
     */
    public function hasBucket()
    {
        return $this->bucket !== null;
    }

    /**
     * Get 'bucket' value
     *
     * @return \Protobuf\Stream
     */
    public function getBucket()
    {
        return $this->bucket;
    }

    /**
     * Set 'bucket' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setBucket($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->bucket = $value;
    }

    /**
     * Check if 'index' has a value
     *
     * @return bool
     */
    public function hasIndex()
    {
        return $this->index !== null;
    }

    /**
     * Get 'index' value
     *
     * @return \Protobuf\Stream
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * Set 'index' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setIndex($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->index = $value;
    }

    /**
     * Check if 'qtype' has a value
     *
     * @return bool
     */
    public function hasQtype()
    {
        return $this->qtype !== null;
    }

    /**
     * Get 'qtype' value
     *
     * @return \Riak\Client\ProtoBuf\RpbIndexReq\IndexQueryType
     */
    public function getQtype()
    {
        return $this->qtype;
    }

    /**
     * Set 'qtype' value
     *
     * @param \Riak\Client\ProtoBuf\RpbIndexReq\IndexQueryType $value
     */
    public function setQtype(\Riak\Client\ProtoBuf\RpbIndexReq\IndexQueryType $value)
    {
        $this->qtype = $value;
    }

    /**
     * Check if 'key' has a value
     *
     * @return bool
     */
    public function hasKey()
    {
        return $this->key !== null;
    }

    /**
     * Get 'key' value
     *
     * @return \Protobuf\Stream
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * Set 'key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setKey($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->key = $value;
    }

    /**
     * Check if 'range_min' has a value
     *
     * @return bool
     */
    public function hasRangeMin()
    {
        return $this->range_min !== null;
    }

    /**
     * Get 'range_min' value
     *
     * @return \Protobuf\Stream
     */
    public function getRangeMin()
    {
        return $this->range_min;
    }

    /**
     * Set 'range_min' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setRangeMin($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->range_min = $value;
    }

    /**
     * Check if 'range_max' has a value
     *
     * @return bool
     */
    public function hasRangeMax()
    {
        return $this->range_max !== null;
    }

    /**
     * Get 'range_max' value
     *
     * @return \Protobuf\Stream
     */
    public function getRangeMax()
    {
        return $this->range_max;
    }

    /**
     * Set 'range_max' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setRangeMax($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->range_max = $value;
    }

    /**
     * Check if 'return_terms' has a value
     *
     * @return bool
     */
    public function hasReturnTerms()
    {
        return $this->return_terms !== null;
    }

    /**
     * Get 'return_terms' value
     *
     * @return bool
     */
    public function getReturnTerms()
    {
        return $this->return_terms;
    }

    /**
     * Set 'return_terms' value
     *
     * @param bool $value
     */
    public function setReturnTerms($value = null)
    {
        $this->return_terms = $value;
    }

    /**
     * Check if 'stream' has a value
     *
     * @return bool
     */
    public function hasStream()
    {
        return $this->stream !== null;
    }

    /**
     * Get 'stream' value
     *
     * @return bool
     */
    public function getStream()
    {
        return $this->stream;
    }

    /**
     * Set 'stream' value
     *
     * @param bool $value
     */
    public function setStream($value = null)
    {
        $this->stream = $value;
    }

    /**
     * Check if 'max_results' has a value
     *
     * @return bool
     */
    public function hasMaxResults()
    {
        return $this->max_results !== null;
    }

    /**
     * Get 'max_results' value
     *
     * @return int
     */
    public function getMaxResults()
    {
        return $this->max_results;
    }

    /**
     * Set 'max_results' value
     *
     * @param int $value
     */
    public function setMaxResults($value = null)
    {
        $this->max_results = $value;
    }

    /**
     * Check if 'continuation' has a value
     *
     * @return bool
     */
    public function hasContinuation()
    {
        return $this->continuation !== null;
    }

    /**
     * Get 'continuation' value
     *
     * @return \Protobuf\Stream
     */
    public function getContinuation()
    {
        return $this->continuation;
    }

    /**
     * Set 'continuation' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setContinuation($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->continuation = $value;
    }

    /**
     * Check if 'timeout' has a value
     *
     * @return bool
     */
    public function hasTimeout()
    {
        return $this->timeout !== null;
    }

    /**
     * Get 'timeout' value
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->timeout;
    }

    /**
     * Set 'timeout' value
     *
     * @param int $value
     */
    public function setTimeout($value = null)
    {
        $this->timeout = $value;
    }

    /**
     * Check if 'type' has a value
     *
     * @return bool
     */
    public function hasType()
    {
        return $this->type !== null;
    }

    /**
     * Get 'type' value
     *
     * @return \Protobuf\Stream
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set 'type' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setType($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->type = $value;
    }

    /**
     * Check if 'term_regex' has a value
     *
     * @return bool
     */
    public function hasTermRegex()
    {
        return $this->term_regex !== null;
    }

    /**
     * Get 'term_regex' value
     *
     * @return \Protobuf\Stream
     */
    public function getTermRegex()
    {
        return $this->term_regex;
    }

    /**
     * Set 'term_regex' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setTermRegex($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->term_regex = $value;
    }

    /**
     * Check if 'pagination_sort' has a value
     *
     * @return bool
     */
    public function hasPaginationSort()
    {
        return $this->pagination_sort !== null;
    }

    /**
     * Get 'pagination_sort' value
     *
     * @return bool
     */
    public function getPaginationSort()
    {
        return $this->pagination_sort;
    }

    /**
     * Set 'pagination_sort' value
     *
     * @param bool $value
     */
    public function setPaginationSort($value = null)
    {
        $this->pagination_sort = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['bucket'])) {
            throw new \InvalidArgumentException('Field "bucket" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['index'])) {
            throw new \InvalidArgumentException('Field "index" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['qtype'])) {
            throw new \InvalidArgumentException('Field "qtype" (tag 3) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'key' => null,
            'range_min' => null,
            'range_max' => null,
            'return_terms' => null,
            'stream' => null,
            'max_results' => null,
            'continuation' => null,
            'timeout' => null,
            'type' => null,
            'term_regex' => null,
            'pagination_sort' => null
        ], $values);

        $message->setBucket($values['bucket']);
        $message->setIndex($values['index']);
        $message->setQtype($values['qtype']);
        $message->setKey($values['key']);
        $message->setRangeMin($values['range_min']);
        $message->setRangeMax($values['range_max']);
        $message->setReturnTerms($values['return_terms']);
        $message->setStream($values['stream']);
        $message->setMaxResults($values['max_results']);
        $message->setContinuation($values['continuation']);
        $message->setTimeout($values['timeout']);
        $message->setType($values['type']);
        $message->setTermRegex($values['term_regex']);
        $message->setPaginationSort($values['pagination_sort']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RpbIndexReq',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'bucket',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'index',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'qtype',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.RpbIndexReq.IndexQueryType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'key',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'range_min',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'range_max',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'return_terms',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'stream',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'max_results',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'continuation',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'timeout',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'term_regex',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'pagination_sort',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->bucket === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbIndexReq#bucket" (tag 1) is required but has no value.');
        }

        if ($this->index === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbIndexReq#index" (tag 2) is required but has no value.');
        }

        if ($this->qtype === null) {
            throw new \UnexpectedValueException('Field "\\Riak\\Client\\ProtoBuf\\RpbIndexReq#qtype" (tag 3) is required but has no value.');
        }

        if ($this->bucket !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->bucket);
        }

        if ($this->index !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->index);
        }

        if ($this->qtype !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->qtype->value());
        }

        if ($this->key !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->key);
        }

        if ($this->range_min !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->range_min);
        }

        if ($this->range_max !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->range_max);
        }

        if ($this->return_terms !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->return_terms);
        }

        if ($this->stream !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->stream);
        }

        if ($this->max_results !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->max_results);
        }

        if ($this->continuation !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeByteStream($stream, $this->continuation);
        }

        if ($this->timeout !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->timeout);
        }

        if ($this->type !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeByteStream($stream, $this->type);
        }

        if ($this->term_regex !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeByteStream($stream, $this->term_regex);
        }

        if ($this->pagination_sort !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->pagination_sort);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->bucket = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->index = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->qtype = \Riak\Client\ProtoBuf\RpbIndexReq\IndexQueryType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->range_min = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->range_max = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->return_terms = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->stream = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->max_results = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->continuation = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->timeout = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->type = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->term_regex = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->pagination_sort = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->bucket !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->bucket);
        }

        if ($this->index !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->index);
        }

        if ($this->qtype !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->qtype->value());
        }

        if ($this->key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->key);
        }

        if ($this->range_min !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->range_min);
        }

        if ($this->range_max !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->range_max);
        }

        if ($this->return_terms !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->stream !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->max_results !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->max_results);
        }

        if ($this->continuation !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->continuation);
        }

        if ($this->timeout !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->timeout);
        }

        if ($this->type !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->type);
        }

        if ($this->term_regex !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->term_regex);
        }

        if ($this->pagination_sort !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->bucket = null;
        $this->index = null;
        $this->qtype = null;
        $this->key = null;
        $this->range_min = null;
        $this->range_max = null;
        $this->return_terms = null;
        $this->stream = null;
        $this->max_results = null;
        $this->continuation = null;
        $this->timeout = null;
        $this->type = null;
        $this->term_regex = null;
        $this->pagination_sort = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Riak\Client\ProtoBuf\RpbIndexReq) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->bucket = ($message->bucket !== null) ? $message->bucket : $this->bucket;
        $this->index = ($message->index !== null) ? $message->index : $this->index;
        $this->qtype = ($message->qtype !== null) ? $message->qtype : $this->qtype;
        $this->key = ($message->key !== null) ? $message->key : $this->key;
        $this->range_min = ($message->range_min !== null) ? $message->range_min : $this->range_min;
        $this->range_max = ($message->range_max !== null) ? $message->range_max : $this->range_max;
        $this->return_terms = ($message->return_terms !== null) ? $message->return_terms : $this->return_terms;
        $this->stream = ($message->stream !== null) ? $message->stream : $this->stream;
        $this->max_results = ($message->max_results !== null) ? $message->max_results : $this->max_results;
        $this->continuation = ($message->continuation !== null) ? $message->continuation : $this->continuation;
        $this->timeout = ($message->timeout !== null) ? $message->timeout : $this->timeout;
        $this->type = ($message->type !== null) ? $message->type : $this->type;
        $this->term_regex = ($message->term_regex !== null) ? $message->term_regex : $this->term_regex;
        $this->pagination_sort = ($message->pagination_sort !== null) ? $message->pagination_sort : $this->pagination_sort;
    }


}

