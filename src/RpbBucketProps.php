<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : riak.proto
 */


namespace Riak\Client\ProtoBuf;

/**
 * Protobuf message : RpbBucketProps
 */
class RpbBucketProps extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * n_val optional uint32 = 1
     *
     * @var int
     */
    protected $n_val = null;

    /**
     * allow_mult optional bool = 2
     *
     * @var bool
     */
    protected $allow_mult = null;

    /**
     * last_write_wins optional bool = 3
     *
     * @var bool
     */
    protected $last_write_wins = null;

    /**
     * precommit repeated message = 4
     *
     * @var \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbCommitHook>
     */
    protected $precommit = null;

    /**
     * has_precommit optional bool = 5
     *
     * @var bool
     */
    protected $has_precommit = null;

    /**
     * postcommit repeated message = 6
     *
     * @var \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbCommitHook>
     */
    protected $postcommit = null;

    /**
     * has_postcommit optional bool = 7
     *
     * @var bool
     */
    protected $has_postcommit = null;

    /**
     * chash_keyfun optional message = 8
     *
     * @var \Riak\Client\ProtoBuf\RpbModFun
     */
    protected $chash_keyfun = null;

    /**
     * linkfun optional message = 9
     *
     * @var \Riak\Client\ProtoBuf\RpbModFun
     */
    protected $linkfun = null;

    /**
     * old_vclock optional uint32 = 10
     *
     * @var int
     */
    protected $old_vclock = null;

    /**
     * young_vclock optional uint32 = 11
     *
     * @var int
     */
    protected $young_vclock = null;

    /**
     * big_vclock optional uint32 = 12
     *
     * @var int
     */
    protected $big_vclock = null;

    /**
     * small_vclock optional uint32 = 13
     *
     * @var int
     */
    protected $small_vclock = null;

    /**
     * pr optional uint32 = 14
     *
     * @var int
     */
    protected $pr = null;

    /**
     * r optional uint32 = 15
     *
     * @var int
     */
    protected $r = null;

    /**
     * w optional uint32 = 16
     *
     * @var int
     */
    protected $w = null;

    /**
     * pw optional uint32 = 17
     *
     * @var int
     */
    protected $pw = null;

    /**
     * dw optional uint32 = 18
     *
     * @var int
     */
    protected $dw = null;

    /**
     * rw optional uint32 = 19
     *
     * @var int
     */
    protected $rw = null;

    /**
     * basic_quorum optional bool = 20
     *
     * @var bool
     */
    protected $basic_quorum = null;

    /**
     * notfound_ok optional bool = 21
     *
     * @var bool
     */
    protected $notfound_ok = null;

    /**
     * backend optional bytes = 22
     *
     * @var \Protobuf\Stream
     */
    protected $backend = null;

    /**
     * search optional bool = 23
     *
     * @var bool
     */
    protected $search = null;

    /**
     * repl optional enum = 24
     *
     * @var \Riak\Client\ProtoBuf\RpbBucketProps\RpbReplMode
     */
    protected $repl = null;

    /**
     * search_index optional bytes = 25
     *
     * @var \Protobuf\Stream
     */
    protected $search_index = null;

    /**
     * datatype optional bytes = 26
     *
     * @var \Protobuf\Stream
     */
    protected $datatype = null;

    /**
     * consistent optional bool = 27
     *
     * @var bool
     */
    protected $consistent = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, \Protobuf\Configuration $configuration = null)
    {
        $this->has_precommit = false;
        $this->has_postcommit = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'n_val' has a value
     *
     * @return bool
     */
    public function hasNVal()
    {
        return $this->n_val !== null;
    }

    /**
     * Get 'n_val' value
     *
     * @return int
     */
    public function getNVal()
    {
        return $this->n_val;
    }

    /**
     * Set 'n_val' value
     *
     * @param int $value
     */
    public function setNVal($value = null)
    {
        $this->n_val = $value;
    }

    /**
     * Check if 'allow_mult' has a value
     *
     * @return bool
     */
    public function hasAllowMult()
    {
        return $this->allow_mult !== null;
    }

    /**
     * Get 'allow_mult' value
     *
     * @return bool
     */
    public function getAllowMult()
    {
        return $this->allow_mult;
    }

    /**
     * Set 'allow_mult' value
     *
     * @param bool $value
     */
    public function setAllowMult($value = null)
    {
        $this->allow_mult = $value;
    }

    /**
     * Check if 'last_write_wins' has a value
     *
     * @return bool
     */
    public function hasLastWriteWins()
    {
        return $this->last_write_wins !== null;
    }

    /**
     * Get 'last_write_wins' value
     *
     * @return bool
     */
    public function getLastWriteWins()
    {
        return $this->last_write_wins;
    }

    /**
     * Set 'last_write_wins' value
     *
     * @param bool $value
     */
    public function setLastWriteWins($value = null)
    {
        $this->last_write_wins = $value;
    }

    /**
     * Check if 'precommit' has a value
     *
     * @return bool
     */
    public function hasPrecommitList()
    {
        return $this->precommit !== null;
    }

    /**
     * Get 'precommit' value
     *
     * @return \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbCommitHook>
     */
    public function getPrecommitList()
    {
        return $this->precommit;
    }

    /**
     * Set 'precommit' value
     *
     * @param \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbCommitHook> $value
     */
    public function setPrecommitList(\Protobuf\Collection $value = null)
    {
        $this->precommit = $value;
    }

    /**
     * Add a new element to 'precommit'
     *
     * @param \Riak\Client\ProtoBuf\RpbCommitHook $value
     */
    public function addPrecommit(\Riak\Client\ProtoBuf\RpbCommitHook $value)
    {
        if ($this->precommit === null) {
            $this->precommit = new \Protobuf\MessageCollection();
        }

        $this->precommit->add($value);
    }

    /**
     * Check if 'has_precommit' has a value
     *
     * @return bool
     */
    public function hasHasPrecommit()
    {
        return $this->has_precommit !== null;
    }

    /**
     * Get 'has_precommit' value
     *
     * @return bool
     */
    public function getHasPrecommit()
    {
        return $this->has_precommit;
    }

    /**
     * Set 'has_precommit' value
     *
     * @param bool $value
     */
    public function setHasPrecommit($value = null)
    {
        $this->has_precommit = $value;
    }

    /**
     * Check if 'postcommit' has a value
     *
     * @return bool
     */
    public function hasPostcommitList()
    {
        return $this->postcommit !== null;
    }

    /**
     * Get 'postcommit' value
     *
     * @return \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbCommitHook>
     */
    public function getPostcommitList()
    {
        return $this->postcommit;
    }

    /**
     * Set 'postcommit' value
     *
     * @param \Protobuf\Collection<\Riak\Client\ProtoBuf\RpbCommitHook> $value
     */
    public function setPostcommitList(\Protobuf\Collection $value = null)
    {
        $this->postcommit = $value;
    }

    /**
     * Add a new element to 'postcommit'
     *
     * @param \Riak\Client\ProtoBuf\RpbCommitHook $value
     */
    public function addPostcommit(\Riak\Client\ProtoBuf\RpbCommitHook $value)
    {
        if ($this->postcommit === null) {
            $this->postcommit = new \Protobuf\MessageCollection();
        }

        $this->postcommit->add($value);
    }

    /**
     * Check if 'has_postcommit' has a value
     *
     * @return bool
     */
    public function hasHasPostcommit()
    {
        return $this->has_postcommit !== null;
    }

    /**
     * Get 'has_postcommit' value
     *
     * @return bool
     */
    public function getHasPostcommit()
    {
        return $this->has_postcommit;
    }

    /**
     * Set 'has_postcommit' value
     *
     * @param bool $value
     */
    public function setHasPostcommit($value = null)
    {
        $this->has_postcommit = $value;
    }

    /**
     * Check if 'chash_keyfun' has a value
     *
     * @return bool
     */
    public function hasChashKeyfun()
    {
        return $this->chash_keyfun !== null;
    }

    /**
     * Get 'chash_keyfun' value
     *
     * @return \Riak\Client\ProtoBuf\RpbModFun
     */
    public function getChashKeyfun()
    {
        return $this->chash_keyfun;
    }

    /**
     * Set 'chash_keyfun' value
     *
     * @param \Riak\Client\ProtoBuf\RpbModFun $value
     */
    public function setChashKeyfun(\Riak\Client\ProtoBuf\RpbModFun $value = null)
    {
        $this->chash_keyfun = $value;
    }

    /**
     * Check if 'linkfun' has a value
     *
     * @return bool
     */
    public function hasLinkfun()
    {
        return $this->linkfun !== null;
    }

    /**
     * Get 'linkfun' value
     *
     * @return \Riak\Client\ProtoBuf\RpbModFun
     */
    public function getLinkfun()
    {
        return $this->linkfun;
    }

    /**
     * Set 'linkfun' value
     *
     * @param \Riak\Client\ProtoBuf\RpbModFun $value
     */
    public function setLinkfun(\Riak\Client\ProtoBuf\RpbModFun $value = null)
    {
        $this->linkfun = $value;
    }

    /**
     * Check if 'old_vclock' has a value
     *
     * @return bool
     */
    public function hasOldVclock()
    {
        return $this->old_vclock !== null;
    }

    /**
     * Get 'old_vclock' value
     *
     * @return int
     */
    public function getOldVclock()
    {
        return $this->old_vclock;
    }

    /**
     * Set 'old_vclock' value
     *
     * @param int $value
     */
    public function setOldVclock($value = null)
    {
        $this->old_vclock = $value;
    }

    /**
     * Check if 'young_vclock' has a value
     *
     * @return bool
     */
    public function hasYoungVclock()
    {
        return $this->young_vclock !== null;
    }

    /**
     * Get 'young_vclock' value
     *
     * @return int
     */
    public function getYoungVclock()
    {
        return $this->young_vclock;
    }

    /**
     * Set 'young_vclock' value
     *
     * @param int $value
     */
    public function setYoungVclock($value = null)
    {
        $this->young_vclock = $value;
    }

    /**
     * Check if 'big_vclock' has a value
     *
     * @return bool
     */
    public function hasBigVclock()
    {
        return $this->big_vclock !== null;
    }

    /**
     * Get 'big_vclock' value
     *
     * @return int
     */
    public function getBigVclock()
    {
        return $this->big_vclock;
    }

    /**
     * Set 'big_vclock' value
     *
     * @param int $value
     */
    public function setBigVclock($value = null)
    {
        $this->big_vclock = $value;
    }

    /**
     * Check if 'small_vclock' has a value
     *
     * @return bool
     */
    public function hasSmallVclock()
    {
        return $this->small_vclock !== null;
    }

    /**
     * Get 'small_vclock' value
     *
     * @return int
     */
    public function getSmallVclock()
    {
        return $this->small_vclock;
    }

    /**
     * Set 'small_vclock' value
     *
     * @param int $value
     */
    public function setSmallVclock($value = null)
    {
        $this->small_vclock = $value;
    }

    /**
     * Check if 'pr' has a value
     *
     * @return bool
     */
    public function hasPr()
    {
        return $this->pr !== null;
    }

    /**
     * Get 'pr' value
     *
     * @return int
     */
    public function getPr()
    {
        return $this->pr;
    }

    /**
     * Set 'pr' value
     *
     * @param int $value
     */
    public function setPr($value = null)
    {
        $this->pr = $value;
    }

    /**
     * Check if 'r' has a value
     *
     * @return bool
     */
    public function hasR()
    {
        return $this->r !== null;
    }

    /**
     * Get 'r' value
     *
     * @return int
     */
    public function getR()
    {
        return $this->r;
    }

    /**
     * Set 'r' value
     *
     * @param int $value
     */
    public function setR($value = null)
    {
        $this->r = $value;
    }

    /**
     * Check if 'w' has a value
     *
     * @return bool
     */
    public function hasW()
    {
        return $this->w !== null;
    }

    /**
     * Get 'w' value
     *
     * @return int
     */
    public function getW()
    {
        return $this->w;
    }

    /**
     * Set 'w' value
     *
     * @param int $value
     */
    public function setW($value = null)
    {
        $this->w = $value;
    }

    /**
     * Check if 'pw' has a value
     *
     * @return bool
     */
    public function hasPw()
    {
        return $this->pw !== null;
    }

    /**
     * Get 'pw' value
     *
     * @return int
     */
    public function getPw()
    {
        return $this->pw;
    }

    /**
     * Set 'pw' value
     *
     * @param int $value
     */
    public function setPw($value = null)
    {
        $this->pw = $value;
    }

    /**
     * Check if 'dw' has a value
     *
     * @return bool
     */
    public function hasDw()
    {
        return $this->dw !== null;
    }

    /**
     * Get 'dw' value
     *
     * @return int
     */
    public function getDw()
    {
        return $this->dw;
    }

    /**
     * Set 'dw' value
     *
     * @param int $value
     */
    public function setDw($value = null)
    {
        $this->dw = $value;
    }

    /**
     * Check if 'rw' has a value
     *
     * @return bool
     */
    public function hasRw()
    {
        return $this->rw !== null;
    }

    /**
     * Get 'rw' value
     *
     * @return int
     */
    public function getRw()
    {
        return $this->rw;
    }

    /**
     * Set 'rw' value
     *
     * @param int $value
     */
    public function setRw($value = null)
    {
        $this->rw = $value;
    }

    /**
     * Check if 'basic_quorum' has a value
     *
     * @return bool
     */
    public function hasBasicQuorum()
    {
        return $this->basic_quorum !== null;
    }

    /**
     * Get 'basic_quorum' value
     *
     * @return bool
     */
    public function getBasicQuorum()
    {
        return $this->basic_quorum;
    }

    /**
     * Set 'basic_quorum' value
     *
     * @param bool $value
     */
    public function setBasicQuorum($value = null)
    {
        $this->basic_quorum = $value;
    }

    /**
     * Check if 'notfound_ok' has a value
     *
     * @return bool
     */
    public function hasNotfoundOk()
    {
        return $this->notfound_ok !== null;
    }

    /**
     * Get 'notfound_ok' value
     *
     * @return bool
     */
    public function getNotfoundOk()
    {
        return $this->notfound_ok;
    }

    /**
     * Set 'notfound_ok' value
     *
     * @param bool $value
     */
    public function setNotfoundOk($value = null)
    {
        $this->notfound_ok = $value;
    }

    /**
     * Check if 'backend' has a value
     *
     * @return bool
     */
    public function hasBackend()
    {
        return $this->backend !== null;
    }

    /**
     * Get 'backend' value
     *
     * @return \Protobuf\Stream
     */
    public function getBackend()
    {
        return $this->backend;
    }

    /**
     * Set 'backend' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setBackend($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->backend = $value;
    }

    /**
     * Check if 'search' has a value
     *
     * @return bool
     */
    public function hasSearch()
    {
        return $this->search !== null;
    }

    /**
     * Get 'search' value
     *
     * @return bool
     */
    public function getSearch()
    {
        return $this->search;
    }

    /**
     * Set 'search' value
     *
     * @param bool $value
     */
    public function setSearch($value = null)
    {
        $this->search = $value;
    }

    /**
     * Check if 'repl' has a value
     *
     * @return bool
     */
    public function hasRepl()
    {
        return $this->repl !== null;
    }

    /**
     * Get 'repl' value
     *
     * @return \Riak\Client\ProtoBuf\RpbBucketProps\RpbReplMode
     */
    public function getRepl()
    {
        return $this->repl;
    }

    /**
     * Set 'repl' value
     *
     * @param \Riak\Client\ProtoBuf\RpbBucketProps\RpbReplMode $value
     */
    public function setRepl(\Riak\Client\ProtoBuf\RpbBucketProps\RpbReplMode $value = null)
    {
        $this->repl = $value;
    }

    /**
     * Check if 'search_index' has a value
     *
     * @return bool
     */
    public function hasSearchIndex()
    {
        return $this->search_index !== null;
    }

    /**
     * Get 'search_index' value
     *
     * @return \Protobuf\Stream
     */
    public function getSearchIndex()
    {
        return $this->search_index;
    }

    /**
     * Set 'search_index' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSearchIndex($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->search_index = $value;
    }

    /**
     * Check if 'datatype' has a value
     *
     * @return bool
     */
    public function hasDatatype()
    {
        return $this->datatype !== null;
    }

    /**
     * Get 'datatype' value
     *
     * @return \Protobuf\Stream
     */
    public function getDatatype()
    {
        return $this->datatype;
    }

    /**
     * Set 'datatype' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setDatatype($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->datatype = $value;
    }

    /**
     * Check if 'consistent' has a value
     *
     * @return bool
     */
    public function hasConsistent()
    {
        return $this->consistent !== null;
    }

    /**
     * Get 'consistent' value
     *
     * @return bool
     */
    public function getConsistent()
    {
        return $this->consistent;
    }

    /**
     * Set 'consistent' value
     *
     * @param bool $value
     */
    public function setConsistent($value = null)
    {
        $this->consistent = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'n_val' => null,
            'allow_mult' => null,
            'last_write_wins' => null,
            'precommit' => [],
            'has_precommit' => false,
            'postcommit' => [],
            'has_postcommit' => false,
            'chash_keyfun' => null,
            'linkfun' => null,
            'old_vclock' => null,
            'young_vclock' => null,
            'big_vclock' => null,
            'small_vclock' => null,
            'pr' => null,
            'r' => null,
            'w' => null,
            'pw' => null,
            'dw' => null,
            'rw' => null,
            'basic_quorum' => null,
            'notfound_ok' => null,
            'backend' => null,
            'search' => null,
            'repl' => null,
            'search_index' => null,
            'datatype' => null,
            'consistent' => null
        ], $values);

        $message->setNVal($values['n_val']);
        $message->setAllowMult($values['allow_mult']);
        $message->setLastWriteWins($values['last_write_wins']);
        $message->setHasPrecommit($values['has_precommit']);
        $message->setHasPostcommit($values['has_postcommit']);
        $message->setChashKeyfun($values['chash_keyfun']);
        $message->setLinkfun($values['linkfun']);
        $message->setOldVclock($values['old_vclock']);
        $message->setYoungVclock($values['young_vclock']);
        $message->setBigVclock($values['big_vclock']);
        $message->setSmallVclock($values['small_vclock']);
        $message->setPr($values['pr']);
        $message->setR($values['r']);
        $message->setW($values['w']);
        $message->setPw($values['pw']);
        $message->setDw($values['dw']);
        $message->setRw($values['rw']);
        $message->setBasicQuorum($values['basic_quorum']);
        $message->setNotfoundOk($values['notfound_ok']);
        $message->setBackend($values['backend']);
        $message->setSearch($values['search']);
        $message->setRepl($values['repl']);
        $message->setSearchIndex($values['search_index']);
        $message->setDatatype($values['datatype']);
        $message->setConsistent($values['consistent']);

        foreach ($values['precommit'] as $item) {
            $message->addPrecommit($item);
        }

        foreach ($values['postcommit'] as $item) {
            $message->addPostcommit($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'RpbBucketProps',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'n_val',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'allow_mult',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'last_write_wins',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'precommit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.RpbCommitHook'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'has_precommit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'postcommit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.RpbCommitHook'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'has_postcommit',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'chash_keyfun',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.RpbModFun'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'linkfun',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.RpbModFun'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'old_vclock',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'young_vclock',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'big_vclock',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'small_vclock',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'pr',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'r',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'w',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'pw',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'dw',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'rw',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'basic_quorum',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'notfound_ok',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'backend',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'search',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 24,
                    'name' => 'repl',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.RpbBucketProps.RpbReplMode'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 25,
                    'name' => 'search_index',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name' => 'datatype',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name' => 'consistent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->n_val !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->n_val);
        }

        if ($this->allow_mult !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeBool($stream, $this->allow_mult);
        }

        if ($this->last_write_wins !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->last_write_wins);
        }

        if ($this->precommit !== null) {
            foreach ($this->precommit as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->has_precommit !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->has_precommit);
        }

        if ($this->postcommit !== null) {
            foreach ($this->postcommit as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->has_postcommit !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->has_postcommit);
        }

        if ($this->chash_keyfun !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->chash_keyfun->serializedSize($sizeContext));
            $this->chash_keyfun->writeTo($context);
        }

        if ($this->linkfun !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->linkfun->serializedSize($sizeContext));
            $this->linkfun->writeTo($context);
        }

        if ($this->old_vclock !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->old_vclock);
        }

        if ($this->young_vclock !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->young_vclock);
        }

        if ($this->big_vclock !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->big_vclock);
        }

        if ($this->small_vclock !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->small_vclock);
        }

        if ($this->pr !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeVarint($stream, $this->pr);
        }

        if ($this->r !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->r);
        }

        if ($this->w !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->w);
        }

        if ($this->pw !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeVarint($stream, $this->pw);
        }

        if ($this->dw !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeVarint($stream, $this->dw);
        }

        if ($this->rw !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->rw);
        }

        if ($this->basic_quorum !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeBool($stream, $this->basic_quorum);
        }

        if ($this->notfound_ok !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeBool($stream, $this->notfound_ok);
        }

        if ($this->backend !== null) {
            $writer->writeVarint($stream, 178);
            $writer->writeByteStream($stream, $this->backend);
        }

        if ($this->search !== null) {
            $writer->writeVarint($stream, 184);
            $writer->writeBool($stream, $this->search);
        }

        if ($this->repl !== null) {
            $writer->writeVarint($stream, 192);
            $writer->writeVarint($stream, $this->repl->value());
        }

        if ($this->search_index !== null) {
            $writer->writeVarint($stream, 202);
            $writer->writeByteStream($stream, $this->search_index);
        }

        if ($this->datatype !== null) {
            $writer->writeVarint($stream, 210);
            $writer->writeByteStream($stream, $this->datatype);
        }

        if ($this->consistent !== null) {
            $writer->writeVarint($stream, 216);
            $writer->writeBool($stream, $this->consistent);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->n_val = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->allow_mult = $reader->readBool($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->last_write_wins = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Riak\Client\ProtoBuf\RpbCommitHook();

                if ($this->precommit === null) {
                    $this->precommit = new \Protobuf\MessageCollection();
                }

                $this->precommit->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->has_precommit = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Riak\Client\ProtoBuf\RpbCommitHook();

                if ($this->postcommit === null) {
                    $this->postcommit = new \Protobuf\MessageCollection();
                }

                $this->postcommit->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->has_postcommit = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Riak\Client\ProtoBuf\RpbModFun();

                $this->chash_keyfun = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Riak\Client\ProtoBuf\RpbModFun();

                $this->linkfun = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->old_vclock = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->young_vclock = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->big_vclock = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->small_vclock = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->pr = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->r = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->w = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->pw = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->dw = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->rw = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->basic_quorum = $reader->readBool($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->notfound_ok = $reader->readBool($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->backend = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->search = $reader->readBool($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->repl = \Riak\Client\ProtoBuf\RpbBucketProps\RpbReplMode::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->search_index = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->datatype = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->consistent = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->n_val !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->n_val);
        }

        if ($this->allow_mult !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->last_write_wins !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->precommit !== null) {
            foreach ($this->precommit as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->has_precommit !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->postcommit !== null) {
            foreach ($this->postcommit as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->has_postcommit !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->chash_keyfun !== null) {
            $innerSize = $this->chash_keyfun->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->linkfun !== null) {
            $innerSize = $this->linkfun->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->old_vclock !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->old_vclock);
        }

        if ($this->young_vclock !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->young_vclock);
        }

        if ($this->big_vclock !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->big_vclock);
        }

        if ($this->small_vclock !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->small_vclock);
        }

        if ($this->pr !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->pr);
        }

        if ($this->r !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->r);
        }

        if ($this->w !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->w);
        }

        if ($this->pw !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->pw);
        }

        if ($this->dw !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->dw);
        }

        if ($this->rw !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->rw);
        }

        if ($this->basic_quorum !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->notfound_ok !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->backend !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->backend);
        }

        if ($this->search !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->repl !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->repl->value());
        }

        if ($this->search_index !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->search_index);
        }

        if ($this->datatype !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->datatype);
        }

        if ($this->consistent !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->n_val = null;
        $this->allow_mult = null;
        $this->last_write_wins = null;
        $this->precommit = null;
        $this->has_precommit = false;
        $this->postcommit = null;
        $this->has_postcommit = false;
        $this->chash_keyfun = null;
        $this->linkfun = null;
        $this->old_vclock = null;
        $this->young_vclock = null;
        $this->big_vclock = null;
        $this->small_vclock = null;
        $this->pr = null;
        $this->r = null;
        $this->w = null;
        $this->pw = null;
        $this->dw = null;
        $this->rw = null;
        $this->basic_quorum = null;
        $this->notfound_ok = null;
        $this->backend = null;
        $this->search = null;
        $this->repl = null;
        $this->search_index = null;
        $this->datatype = null;
        $this->consistent = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Riak\Client\ProtoBuf\RpbBucketProps) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->n_val = ($message->n_val !== null) ? $message->n_val : $this->n_val;
        $this->allow_mult = ($message->allow_mult !== null) ? $message->allow_mult : $this->allow_mult;
        $this->last_write_wins = ($message->last_write_wins !== null) ? $message->last_write_wins : $this->last_write_wins;
        $this->precommit = ($message->precommit !== null) ? $message->precommit : $this->precommit;
        $this->has_precommit = ($message->has_precommit !== null) ? $message->has_precommit : $this->has_precommit;
        $this->postcommit = ($message->postcommit !== null) ? $message->postcommit : $this->postcommit;
        $this->has_postcommit = ($message->has_postcommit !== null) ? $message->has_postcommit : $this->has_postcommit;
        $this->chash_keyfun = ($message->chash_keyfun !== null) ? $message->chash_keyfun : $this->chash_keyfun;
        $this->linkfun = ($message->linkfun !== null) ? $message->linkfun : $this->linkfun;
        $this->old_vclock = ($message->old_vclock !== null) ? $message->old_vclock : $this->old_vclock;
        $this->young_vclock = ($message->young_vclock !== null) ? $message->young_vclock : $this->young_vclock;
        $this->big_vclock = ($message->big_vclock !== null) ? $message->big_vclock : $this->big_vclock;
        $this->small_vclock = ($message->small_vclock !== null) ? $message->small_vclock : $this->small_vclock;
        $this->pr = ($message->pr !== null) ? $message->pr : $this->pr;
        $this->r = ($message->r !== null) ? $message->r : $this->r;
        $this->w = ($message->w !== null) ? $message->w : $this->w;
        $this->pw = ($message->pw !== null) ? $message->pw : $this->pw;
        $this->dw = ($message->dw !== null) ? $message->dw : $this->dw;
        $this->rw = ($message->rw !== null) ? $message->rw : $this->rw;
        $this->basic_quorum = ($message->basic_quorum !== null) ? $message->basic_quorum : $this->basic_quorum;
        $this->notfound_ok = ($message->notfound_ok !== null) ? $message->notfound_ok : $this->notfound_ok;
        $this->backend = ($message->backend !== null) ? $message->backend : $this->backend;
        $this->search = ($message->search !== null) ? $message->search : $this->search;
        $this->repl = ($message->repl !== null) ? $message->repl : $this->repl;
        $this->search_index = ($message->search_index !== null) ? $message->search_index : $this->search_index;
        $this->datatype = ($message->datatype !== null) ? $message->datatype : $this->datatype;
        $this->consistent = ($message->consistent !== null) ? $message->consistent : $this->consistent;
    }


}

